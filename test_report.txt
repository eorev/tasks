
> react-typescript-starter@0.1.0 test
> react-scripts test --coverage

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
PASS src/nested.test.ts
PASS src/arrays.test.ts
PASS src/objects.test.ts
PASS src/components/StartAttempt.test.tsx
PASS src/components/TwoDice.test.tsx
FAIL src/form-components/MultipleChoiceQuestion.test.tsx
  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ The answer is initially incorrect

    TestingLibraryElementError: Unable to find an element with the text: /‚ùå/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      21 |             />
      22 |         );
    > 23 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();
         |                       ^
      24 |         expect(screen.queryByText(/‚úîÔ∏è/i)).not.toBeInTheDocument();
      25 |     });
      26 |     test("Can choose the correct answer", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:23:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can choose the correct answer

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      33 |         const select = screen.getByRole("combobox");
      34 |         userEvent.selectOptions(select, "2");
    > 35 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      36 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      37 |     });
      38 |     test("Can choose the correct answer and then incorrect", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:35:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can choose the correct answer and then incorrect

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      45 |         const select = screen.getByRole("combobox");
      46 |         userEvent.selectOptions(select, "2");
    > 47 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      48 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      49 |         userEvent.selectOptions(select, "3");
      50 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:47:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can start off initially correct

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Alpha"[39m
            [36m>[39m
              [0mAlpha[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Beta"[39m
            [36m>[39m
              [0mBeta[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Gamma"[39m
            [36m>[39m
              [0mGamma[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      60 |         const select = screen.getByRole("combobox");
      61 |         userEvent.selectOptions(select, "Alpha");
    > 62 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      63 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      64 |     });
      65 |     test("One more test of choosing the right answer", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:62:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ One more test of choosing the right answer

    TestingLibraryElementError: Unable to find an element with the text: /‚ùå/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Hello"[39m
            [36m>[39m
              [0mHello[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"World"[39m
            [36m>[39m
              [0mWorld[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      70 |             />
      71 |         );
    > 72 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();
         |                       ^
      73 |         expect(screen.queryByText(/‚úîÔ∏è/i)).not.toBeInTheDocument();
      74 |         const select = screen.getByRole("combobox");
      75 |         userEvent.selectOptions(select, "World");

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:72:23)

PASS src/bad-components/ChooseTeam.test.tsx
PASS src/bad-components/DoubleHalf.test.tsx
PASS src/HtmlCss.test.tsx
PASS src/functions.test.ts
PASS src/form-components/CheckAnswer.test.tsx
FAIL src/form-components/EditMode.test.tsx
  ‚óè EditMode Component tests ‚Ä∫ There is one checkbox and no textboxes

    expect(element).toHaveClass("form-switch")

    Expected the element to have class:
      form-switch
    Received:
      switch

       9 |         const switchButton = screen.getByRole("checkbox");
      10 |         expect(switchButton).toBeInTheDocument();
    > 11 |         expect(switchButton.parentElement).toHaveClass("form-switch");
         |                                            ^
      12 |         expect(screen.queryByRole("textbox")).not.toBeInTheDocument();
      13 |     });
      14 |     test("Initial text should be 'Your Name is a student'.", () => {

      at Object.<anonymous> (src/form-components/EditMode.test.tsx:11:44)

PASS src/components/ChangeType.test.tsx
PASS src/components/CycleHoliday.test.tsx
FAIL src/form-components/GiveAttempts.test.tsx
  ‚óè GiveAttempts Component tests ‚Ä∫ You can gain arbitrary attempts

    TestingLibraryElementError: Unable to find an element with the text: /13/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mGive Attempts[0m
          [36m</span>[39m
          [36m<p>[39m
            [0mAttempts left: [0m
            [0m3[0m
          [36m</p>[39m
          [36m<label>[39m
            [0mRequest additional attempts:[0m
            [36m<input[39m
              [33mtype[39m=[32m"number"[39m
              [33mvalue[39m=[32m"0"[39m
            [36m/>[39m
          [36m</label>[39m
          [36m<br />[39m
          [36m<button>[39m
            [0mUse attempt[0m
          [36m</button>[39m
          [36m<button>[39m
            [0mGain attempts[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      32 |         userEvent.type(amountToGive, "10");
      33 |         gain.click();
    > 34 |         expect(screen.getByText(/13/i)).toBeInTheDocument();
         |                       ^
      35 |         userEvent.type(amountToGive, "100");
      36 |         gain.click();
      37 |         expect(screen.getByText(/113/i)).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/GiveAttempts.test.tsx:34:23)

PASS src/form-components/ChangeColor.test.tsx
PASS src/components/Counter.test.tsx
PASS src/components/RevealAnswer.test.tsx
PASS src/bad-components/ColoredBox.test.tsx
PASS src/bad-components/ShoveBox.test.tsx
PASS src/text.test.tsx
PASS src/App.test.tsx
-----------------------------|---------|----------|---------|---------|-------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
-----------------------------|---------|----------|---------|---------|-------------------
All files                    |   98.06 |    91.96 |   99.18 |   97.97 |                   
 src                         |   98.46 |    96.77 |     100 |   98.34 |                   
  App.tsx                    |     100 |      100 |     100 |     100 |                   
  arrays.ts                  |     100 |      100 |     100 |     100 |                   
  functions.ts               |     100 |      100 |     100 |     100 |                   
  nested.ts                  |     100 |      100 |     100 |     100 |                   
  objects.ts                 |    90.9 |       80 |     100 |    90.9 | 41,56             
 src/bad-components          |     100 |       50 |     100 |     100 |                   
  ChooseTeam.tsx             |     100 |       50 |     100 |     100 | 18                
  ColoredBox.tsx             |     100 |      100 |     100 |     100 |                   
  DoubleHalf.tsx             |     100 |      100 |     100 |     100 |                   
  ShoveBox.tsx               |     100 |      100 |     100 |     100 |                   
 src/components              |     100 |    94.11 |     100 |     100 |                   
  ChangeType.tsx             |     100 |      100 |     100 |     100 |                   
  Counter.tsx                |     100 |      100 |     100 |     100 |                   
  CycleHoliday.tsx           |     100 |       90 |     100 |     100 | 16,30             
  RevealAnswer.tsx           |     100 |      100 |     100 |     100 |                   
  StartAttempt.tsx           |     100 |      100 |     100 |     100 |                   
  TwoDice.tsx                |     100 |      100 |     100 |     100 |                   
 src/form-components         |   93.02 |    71.42 |   94.11 |   93.02 |                   
  ChangeColor.tsx            |     100 |      100 |     100 |     100 |                   
  CheckAnswer.tsx            |     100 |      100 |     100 |     100 |                   
  EditMode.tsx               |     100 |      100 |     100 |     100 |                   
  GiveAttempts.tsx           |    92.3 |       75 |     100 |    92.3 | 12                
  MultipleChoiceQuestion.tsx |      80 |       25 |      75 |      80 | 21-22             
 src/interfaces              |       0 |        0 |       0 |       0 |                   
  answer.ts                  |       0 |        0 |       0 |       0 |                   
  question.ts                |       0 |        0 |       0 |       0 |                   
-----------------------------|---------|----------|---------|---------|-------------------

Summary of all failing tests
FAIL src/form-components/MultipleChoiceQuestion.test.tsx
  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ The answer is initially incorrect

    TestingLibraryElementError: Unable to find an element with the text: /‚ùå/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      21 |             />
      22 |         );
    > 23 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();
         |                       ^
      24 |         expect(screen.queryByText(/‚úîÔ∏è/i)).not.toBeInTheDocument();
      25 |     });
      26 |     test("Can choose the correct answer", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:23:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can choose the correct answer

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      33 |         const select = screen.getByRole("combobox");
      34 |         userEvent.selectOptions(select, "2");
    > 35 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      36 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      37 |     });
      38 |     test("Can choose the correct answer and then incorrect", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:35:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can choose the correct answer and then incorrect

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"1"[39m
            [36m>[39m
              [0m1[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"2"[39m
            [36m>[39m
              [0m2[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"3"[39m
            [36m>[39m
              [0m3[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      45 |         const select = screen.getByRole("combobox");
      46 |         userEvent.selectOptions(select, "2");
    > 47 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      48 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      49 |         userEvent.selectOptions(select, "3");
      50 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:47:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ Can start off initially correct

    TestingLibraryElementError: Unable to find an element with the text: /‚úîÔ∏è/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Alpha"[39m
            [36m>[39m
              [0mAlpha[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Beta"[39m
            [36m>[39m
              [0mBeta[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Gamma"[39m
            [36m>[39m
              [0mGamma[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      60 |         const select = screen.getByRole("combobox");
      61 |         userEvent.selectOptions(select, "Alpha");
    > 62 |         expect(screen.getByText(/‚úîÔ∏è/i)).toBeInTheDocument();
         |                       ^
      63 |         expect(screen.queryByText(/‚ùå/i)).not.toBeInTheDocument();
      64 |     });
      65 |     test("One more test of choosing the right answer", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:62:23)

  ‚óè MultipleChoiceQuestion Component tests ‚Ä∫ One more test of choosing the right answer

    TestingLibraryElementError: Unable to find an element with the text: /‚ùå/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mMultiple Choice Question[0m
          [36m</span>[39m
          [36m<select>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"Hello"[39m
            [36m>[39m
              [0mHello[0m
            [36m</option>[39m
            [36m<option[39m
              [33mvalue[39m=[32m"World"[39m
            [36m>[39m
              [0mWorld[0m
            [36m</option>[39m
          [36m</select>[39m
          [36m<button>[39m
            [0mCheck Answer[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      70 |             />
      71 |         );
    > 72 |         expect(screen.getByText(/‚ùå/i)).toBeInTheDocument();
         |                       ^
      73 |         expect(screen.queryByText(/‚úîÔ∏è/i)).not.toBeInTheDocument();
      74 |         const select = screen.getByRole("combobox");
      75 |         userEvent.selectOptions(select, "World");

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/MultipleChoiceQuestion.test.tsx:72:23)

FAIL src/form-components/EditMode.test.tsx
  ‚óè EditMode Component tests ‚Ä∫ There is one checkbox and no textboxes

    expect(element).toHaveClass("form-switch")

    Expected the element to have class:
      form-switch
    Received:
      switch

       9 |         const switchButton = screen.getByRole("checkbox");
      10 |         expect(switchButton).toBeInTheDocument();
    > 11 |         expect(switchButton.parentElement).toHaveClass("form-switch");
         |                                            ^
      12 |         expect(screen.queryByRole("textbox")).not.toBeInTheDocument();
      13 |     });
      14 |     test("Initial text should be 'Your Name is a student'.", () => {

      at Object.<anonymous> (src/form-components/EditMode.test.tsx:11:44)

FAIL src/form-components/GiveAttempts.test.tsx
  ‚óè GiveAttempts Component tests ‚Ä∫ You can gain arbitrary attempts

    TestingLibraryElementError: Unable to find an element with the text: /13/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<span>[39m
            [0mGive Attempts[0m
          [36m</span>[39m
          [36m<p>[39m
            [0mAttempts left: [0m
            [0m3[0m
          [36m</p>[39m
          [36m<label>[39m
            [0mRequest additional attempts:[0m
            [36m<input[39m
              [33mtype[39m=[32m"number"[39m
              [33mvalue[39m=[32m"0"[39m
            [36m/>[39m
          [36m</label>[39m
          [36m<br />[39m
          [36m<button>[39m
            [0mUse attempt[0m
          [36m</button>[39m
          [36m<button>[39m
            [0mGain attempts[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      32 |         userEvent.type(amountToGive, "10");
      33 |         gain.click();
    > 34 |         expect(screen.getByText(/13/i)).toBeInTheDocument();
         |                       ^
      35 |         userEvent.type(amountToGive, "100");
      36 |         gain.click();
      37 |         expect(screen.getByText(/113/i)).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/form-components/GiveAttempts.test.tsx:34:23)


Test Suites: 3 failed, 19 passed, 22 total
Tests:       7 failed, 135 passed, 142 total
Snapshots:   0 total
Time:        12.333 s
Ran all test suites.
